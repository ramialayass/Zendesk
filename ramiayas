# Online Python - IDE, Editor, Compiler, Interpreter
import csv
import http.client

def main_function():
    # let's say I have the CSV file saved to my local machine desktop. The CSV file has one worksheet with 10 rows where
    # each row holds information about a particular ticket. Suppose that the file name is example_data_set.csv.
    # The names of columns are as follows: subject, body, requester_user_id,
    # requester_name,  requester_organization, requester_primary_email,
    # user_in_CC_id, user_in_CC_name, user_organization,and user_primary_email.

    # So we have got to open the CSV file in the first place.

    with (open(r"C:\Users\ramia\Downloads\example_data_set.csv") as csvfile):
        # read the csv file
        reader = csv.DictReader(csvfile)

        # loop through each row or record and check the ext_id column value for each row thereafter.
        for row in reader:
            requester_id = row['requester_user_id']
            cc_user_id = row['user_in_CC_id']

            final_requester_user_id = requester_id
            final_cc_user_id = cc_user_id

            # user id of bothe users is required to trigger the Show User endpoint.
            # so it must not be empty regardless of the path we will go through.
            if not requester_id:
                raise Exception("The requester_user_id field value cannot be null. You may set to 0 if the the requester has no user id."
                                " Please update the CSV file and rerun the script thereafter.")

            elif not cc_user_id:
                raise Exception("The user_in_CC_id field value cannot be null. You may set to 0 if the the requester has no user id."
                                " Please update the CSV file and rerun the script thereafter.")


        for row in reader:

            if row:
                response_json1 = get_user_profile(requester_id)
                response_json2 = get_user_profile(cc_user_id)

                # checking if requester requester user profile does not exist in Zendesk.

                if response_json1.status_code == 404:
                    # status code 404 means that the user does not exist in Zendesk so we need to create the user profile for requester.
                    create_user_response_json = create_new_requester_user_profile(row)

                    if not create_user_response_json.status_code == 201:
                        raise Exception("The row with requester user id %s has not been created."
                                        "The error code description is as follows: " % (requester_id,create_user_response_json.get("message")))

                    elif create_user_response_json.status_code == 201:
                       #extract the requester user id from the api response to pass on to payload of ticket creation endpoint
                       final_requester_user_id = create_user_response_json.get("user").get("id")




                # checking if CC user profile does not exist in Zendesk.
                if response_json2.status_code == 404:
                    # status code 404 means that the user does not exist in Zendesk so we need to create the user in CC.
                    create_user_response_json = create_cc_user_profile(row)

                    if not create_user_response_json.status_code == 201:
                        raise Exception("The row with CC user id %s has not been created."
                                        "The error code description is as follows: " % (cc_user_id,create_user_response_json.get("message")))

                    elif create_user_response_json.status_code == 201:
                        # extract the cc user id from the api response to pass on to payload of ticket creation endpoint
                        final_cc_user_id = create_user_response_json.get("user").get("id")




                create_ticket_response_json = create_ticket(row, final_requester_user_id, final_cc_user_id)

                if not create_ticket_response_json.status_code == 201:
                    raise Exception("The ticket with subject %s has not been created."
                                    "The error code description is as follows: " % (row['subject'], create_ticket_response_json.get("message")))




def get_user_profile(user_id):
    """
    Function to search a user based on user_id by calling Get Show User endpoint from Support API Collection.
    :return: Dict containing all information pertaining to a particular user in Zendesk.
    """
    conn = http.client.HTTPSConnection("zeooshelp.zendesk.com")
    headers = {'Accept': "application/json"}
    # The endpoint we are calling here is GET Show User.
    conn.request("GET", "/api/v2/users/:user_id", headers=headers)
    res = conn.getresponse()
    data = res.read()
    response_data = data.decode("utf-8")

    # Store JSON data in response_data
    resposta = response_data.json()
    return resposta


def create_new_requester_user_profile(row):
    """
    Function to create a new user profile for the requester of a particular row via POST Create User endpoint.
    :return: Dict containing all information pertaining to the newly created user.
    """
    conn = http.client.HTTPSConnection("zeooshelp.zendesk.com")

    payload = prepare_values_requester_user_creation(row)

    validate_user_fields(payload)

    headers = {
        'content-type': "application/json",
        'Accept': "application/json"
    }

    conn.request("POST", "/api/v2/users", payload, headers)

    res = conn.getresponse()
    data = res.read()

    response_data = data.decode("utf-8")
    # Store JSON data in response_data
    resposta = response_data.json()

    return resposta


def create_cc_user_profile(row):
    """
    Function to create a new user profile for the user in CC of a particular row via POST Create User endpoint.
    :return: Dict containing all information pertaining to the newly created user.
    """
    conn = http.client.HTTPSConnection("zeooshelp.zendesk.com")

    payload = prepare_values_cc_user_creation(row)

    validate_user_fields(payload)

    headers = {
        'content-type': "application/json",
        'Accept': "application/json"
    }

    conn.request("POST", "/api/v2/users", payload, headers)

    res = conn.getresponse()
    data = res.read()

    response_data = data.decode("utf-8")
    # Store JSON data in response_data
    resposta = response_data.json()

    return resposta


def create_ticket(row, final_requester_user_id, final_cc_user_id):
    """
    Function to create a new ticket for a particular row using the
    POST Create Ticket endpoint with the data stored in CSV file.
    :return: Dict containing all information pertaining to the newly created ticket.
    """
    conn = http.client.HTTPSConnection("zeooshelp.zendesk.com")
    # call function to generate payload for the row passed on as argument.
    payload = prepare_values_ticket_creation(row, final_requester_user_id, final_cc_user_id)

    headers = {
        'content-type': "application/json",
        'Accept': "application/json",
        'Authorization': "Basic <credentials>"
    }

    conn.request("POST", "/api/v2/tickets", payload, headers)

    res = conn.getresponse()
    data = res.read()
    response_data = data.decode("utf-8")
    # Store JSON data in response_data
    resposta = response_data.json()

    return resposta


def prepare_values_ticket_creation(row, final_requester_user_id, final_cc_user_id):
    """
    Function to prepare values to insert on the rest api call.
    :return: Dict regarding all ticket information required for Create Ticket endpoint, to be passed
    on as payload.
    """

    result = {
        "ticket": {
            "comment": {
                "body": str(row['body'])
            },
            "custom_fields": [
                {
                    "title": str(row['subject']),
                    "description": str(row['body'])
                }
            ],
            "email_ccs": [
                {
                    "action": "put",
                    "user_email": str(row['user_primary_email']),
                    "user_id": str(row['final_cc_user_id']),
                    "user_name": str(row['user_in_CC_name'])
                }
            ],
            "requester_id": row['final_requester_user_id'],
            "status": "new",
            "subject": str(row['subject'])
        }
    }

    _logger.info(result)
    return result


def prepare_values_requester_user_creation(row):
    """
    Function to prepare values to insert on the rest api call.
    :return: Dict regarding all requester information required for Create User endpoint, to be passed
    on as payload.
    """
    result = {
        "user": {
        "name": str(row['requester_name']),
        "email": str(row['requester_primary_email']),

        "organization": {
            "name": str(row['requester_organization'])
        }
        }
    }

    _logger.info(result)
    return result

def prepare_values_cc_user_creation(row):
    """
    Function to prepare values to insert on the rest api call.
    :return: Dict regarding all information about user in CC required for Create User endpoint, to be passed
    on as payload.
    """
    result = {
        "user": {
            "name": str(row['user_in_CC_name']),
            "email": str(row['user_primary_email']),

            "organization": {
                "name": str(row['user_organization'])
            }
        }
    }

    _logger.info(result)
    return result


def validate_user_fields(payload):
    """
    Function to validate all mandatory fields to be passed on to the payload, and return any error if any
    of those fields is empty so we can take action accordingly.
    """
    for key, value in payload['user'].items():
        if key in ["name", "email"] and not value:
            raise Exception("Missing value for column name %s " % key)

    if payload['user']['organization']['name'] is null:
            raise Exception("Missing value for organization name")
